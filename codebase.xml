<documents>
<!-- Configuration Files -->
<document index="1">
<source>/.env.local</source>
<document_content>
# ANTHROPIC_API_KEY=
PASSWORD=
</document_content>
</document>

<document index="2">
<source>/.eslintrc.json</source>
<document_content>
// Your ESLint configuration
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

</document_content>
</document>

<!-- API Routes -->
<document index="3">
<source>/src/api/analyze/route.ts</source>
<document_content>
// Your analyze route code
// src/app/api/analyze/route.ts
import { NextResponse } from 'next/server';
import { headers } from 'next/headers';
import Anthropic from '@anthropic-ai/sdk';

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY
});

async function analyzeBusiness(formData: Record<string, string>) {
  try {
    const message = await anthropic.messages.create({
      model: "claude-3-opus-20240229",
      max_tokens: 4096,
      temperature: 0.7,
      messages: [{
        role: "user",
        content: `Please analyze this business information and create a detailed report:
        
        ${Object.entries(formData)
          .map(([key, value]) => `${key}: ${value}`)
          .join('\n\n')}
        
        Generate a comprehensive report with these sections:
        1. Executive Summary
        2. Problem Analysis
        3. Target Audience Profile
        4. Competitive Landscape
        5. Marketing and Communication Channels
        6. Elevator Pitch and USP
        7. Solution Overview
        8. Financial Overview: Costs and Revenue
        9. Business Advantages and Growth Opportunities
        10. Personal Fit and Long-Term Vision`
      }]
    });

    const content = message.content[0];
    if (content && 'text' in content) {
      return content.text;
    }
    throw new Error('Unexpected response format from Claude');

  } catch (error) {
    console.error('Error calling Anthropic API:', error);
    throw error;
  }
}

export async function POST(req: Request) {
  try {
    // Changed headers handling
    const headersList = headers();
    const authHeader = headersList.get('authorization') || '';  // Using OR operator instead

    if (authHeader !== `Bearer ${process.env.PASSWORD}`) {
      console.log('Auth failed. Expected:', process.env.PASSWORD);
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const formData = await req.json();
    console.log('Received form data:', formData);

    const analysis = await analyzeBusiness(formData);
    console.log('Analysis generated:', analysis.substring(0, 100) + '...');

    return NextResponse.json({ analysis });
    
  } catch (error) {
    console.error('Error in analysis:', error);
    return NextResponse.json(
      { error: 'Failed to analyze business data' },
      { status: 500 }
    );
  }
}
</document_content>
</document>

<document index="5">
<source>/src/api/generate-pdf/analysis.ts</source>
<document_content>
// Your analysis code
// This file handles sending the form data to generate the report
export const generateAnalysis = async (formData: FormData) => {
  try {
    const response = await fetch('/api/generate-report', {
      method: 'POST',
      body: formData,
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      const error = new Error('SERVER_ERROR') as any;
      error.code = 'SERVER_ERROR';
      error.details = await response.text();
      throw error;
    }

    return response.json();
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
};
</document_content>
</document>

<!-- App Files -->
<document index="6">
<source>/src/app/globals.css</source>
<document_content>
/* Your global styles */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

</document_content>
</document>

<document index="7">
<source>/src/app/layout.tsx</source>
<document_content>
// Your layout component
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

</document_content>
</document>

<document index="8">
<source>/src/app/page.tsx</source>
<document_content>
// Your page component
// src/app/page.tsx

'use client';

import { useState } from 'react';
import BusinessForm from '@/components/BusinessForm';
import { PDFReport } from '@/components/Report';

export default function Home() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [password, setPassword] = useState('');
  const [analysis, setAnalysis] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    if (password) {
      setIsAuthenticated(true);
      localStorage.setItem('password', password);
    }
  };

  const handleSubmit = async (formData: Record<string, string>) => {
    try {
      const response = await fetch('/api/analyze', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('password')}`,
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error('Analysis failed');
      }

      const data = await response.json();
      setAnalysis(data.analysis);
    } catch (error) {
      setError('Failed to generate analysis. Please try again.');
      console.error('Error:', error);
    }
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <form onSubmit={handleLogin} className="p-8 bg-white rounded-lg shadow-md">
          <h1 className="text-2xl font-bold mb-6">Enter Password</h1>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full p-2 border rounded mb-4"
            placeholder="Enter password"
          />
          <button
            type="submit"
            className="w-full px-4 py-2 bg-blue-500 text-white rounded"
          >
            Access Tool
          </button>
        </form>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
          <span className="block sm:inline">{error}</span>
        </div>
      )}

      {!analysis ? (
        <BusinessForm onSubmit={handleSubmit} />
      ) : (
        <PDFReport 
          analysis={analysis} 
          onReset={() => setAnalysis(null)}
        />
      )}
    </div>
  );
}
</document_content>
</document>

<!-- Components -->
<document index="9">
<source>/src/components/Alert/index.tsx</source>
<document_content>
// Your Alert component
import React from 'react';

interface AlertProps {
  children: React.ReactNode;
  variant?: 'error' | 'success' | 'warning';
}

const Alert: React.FC<AlertProps> = ({ children, variant = 'error' }) => {
  const colors = {
    error: 'bg-red-50 border-red-200 text-red-700',
    success: 'bg-green-50 border-green-200 text-green-700',
    warning: 'bg-yellow-50 border-yellow-200 text-yellow-700'
  };

  return (
    <div className={`p-4 rounded-md border ${colors[variant]}`}>
      {children}
    </div>
  );
};

export default Alert;
</document_content>
</document>

<document index="10">
<source>/src/components/BusinessForm/index.tsx</source>
<document_content>
// Your BusinessForm component
import React, { useState } from 'react';
import FormSection from './FormSection';
import Alert from '../Alert';
import { Section } from '@/lib/types';
import type { Question } from '@/lib/types';
import * as questionsModule from './question';

interface BusinessFormProps {
  onSubmit: (formData: Record<string, string>) => Promise<void>;
}

const BusinessForm: React.FC<BusinessFormProps> = ({ onSubmit }) => {
  const [currentSection, setCurrentSection] = useState<Section>(questionsModule.sections[0]);
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [report, setReport] = useState<string | null>(null);

  const handleInputChange = (questionId: string, value: string) => {
    setFormData((prev) => ({
      ...prev,
      [questionId]: value,
    }));
    // Clear messages when user starts typing
    setError(null);
    setSuccessMessage(null);
  };

  const validateCurrentSection = (): boolean => {
    const currentQuestions = questionsModule.getQuestionsBySection(currentSection);
    const unansweredQuestions = currentQuestions.filter(
      question => !formData[question.id]?.trim()
    );

    if (unansweredQuestions.length > 0) {
      setError(`Please answer all questions in the ${currentSection} section before proceeding.`);
      return false;
    }

    return true;
  };

  const handleNext = () => {
    if (!validateCurrentSection()) {
      return;
    }

    const nextSection = questionsModule.getNextSection(currentSection);
    if (nextSection) {
      setError(null);
      setSuccessMessage(null);
      setCurrentSection(nextSection);
      window.scrollTo(0, 0);
    }
  };

  const handlePrevious = () => {
    const prevSection = questionsModule.getPreviousSection(currentSection);
    if (prevSection) {
      setError(null);
      setSuccessMessage(null);
      setCurrentSection(prevSection);
      window.scrollTo(0, 0);
    }
  };

  const validateForm = (): boolean => {
    const allQuestions = questionsModule.sections.flatMap(section => 
      questionsModule.getQuestionsBySection(section)
    );
    
    const unansweredQuestions = allQuestions.filter(
      question => !formData[question.id]?.trim()
    );

    if (unansweredQuestions.length > 0) {
      const firstUnanswered = unansweredQuestions[0];
      const section = questionsModule.sections.find(section => 
        questionsModule.getQuestionsBySection(section).includes(firstUnanswered)
      );
      
      setError(`Please complete all questions. Missing answers in ${section} section.`);
      setCurrentSection(section as Section);
      return false;
    }

    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    setError(null);
    setSuccessMessage(null);
    setReport(null);

    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      // Make the API call to generate report
      const response = await fetch('/api/generate-report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || 'Failed to generate report');
      }

      // Store the generated report
      setReport(data.report);
      setSuccessMessage('Report generated successfully!');
      
      // Call the original onSubmit prop
      await onSubmit(formData);
      
    } catch (error: any) {
      console.error('Error generating report:', error);
      setError(error.message || 'Failed to generate report. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSectionClick = (section: Section) => {
    if (currentSection !== section && !validateCurrentSection()) {
      return;
    }
    setCurrentSection(section);
    setError(null);
    setSuccessMessage(null);
    window.scrollTo(0, 0);
  };

  const currentQuestions = questionsModule.getQuestionsBySection(currentSection);
  const isLastSection = !questionsModule.getNextSection(currentSection);
  const isFirstSection = !questionsModule.getPreviousSection(currentSection);

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">
          Business Canvas Analysis
        </h1>
        <div className="flex space-x-2 overflow-x-auto pb-2">
          {questionsModule.sections.map((sectionItem) => (
            <button
              key={sectionItem}
              onClick={() => handleSectionClick(sectionItem)}
              className={`px-4 py-2 rounded-full text-sm whitespace-nowrap ${
                currentSection === sectionItem
                  ? 'bg-blue-500 text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              {sectionItem}
            </button>
          ))}
        </div>
      </div>

      {error && (
        <div className="mb-6">
          <Alert variant="error">{error}</Alert>
        </div>
      )}

      {successMessage && (
        <div className="mb-6">
          <Alert variant="success">{successMessage}</Alert>
        </div>
      )}

      <form onSubmit={handleSubmit} className="space-y-8">
        <FormSection
          questions={currentQuestions}
          formData={formData}
          onChange={handleInputChange}
        />

        <div className="flex justify-between pt-6">
          <button
            type="button"
            onClick={handlePrevious}
            className={`px-6 py-2 rounded-md ${
              isFirstSection
                ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
            disabled={isFirstSection}
          >
            Previous
          </button>

          {isLastSection ? (
            <button
              type="submit"
              className={`px-6 py-2 rounded-md bg-blue-500 text-white ${
                isSubmitting ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-600'
              }`}
              disabled={isSubmitting}
            >
              {isSubmitting ? 'Generating Report...' : 'Generate Report'}
            </button>
          ) : (
            <button
              type="button"
              onClick={handleNext}
              className="px-6 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600"
            >
              Next
            </button>
          )}
        </div>
      </form>

      {report && (
        <div className="mt-8 p-6 bg-white rounded-lg shadow">
          <h2 className="text-2xl font-bold mb-4">Your Business Report</h2>
          <div className="whitespace-pre-wrap">{report}</div>
        </div>
      )}
    </div>
  );
};

export default BusinessForm;
</document_content>
</document>

<document index="11">
<source>/src/components/Report/index.tsx</source>
<document_content>
// Your Report component
// src/components/Report/index.tsx

export { PDFReport } from './PDFReport';
</document_content>
</document>

<!-- Library Files -->
<document index="12">
<source>/src/lib/anthropic.ts</source>
<document_content>
// Your Anthropic configuration
// src/lib/anthropic.ts

import Anthropic from '@anthropic-ai/sdk';

if (!process.env.ANTHROPIC_API_KEY) {
  throw new Error('Missing ANTHROPIC_API_KEY environment variable');
}

export const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

export async function analyzeBusiness(formData: Record<string, string>) {
  try {
    const message = await anthropic.messages.create({
      model: "claude-3-opus-20240229",
      max_tokens: 4096,
      temperature: 0.7,
      system: `You are a seasoned business consultant tasked with analyzing business plans and providing actionable insights. 
               Analyze the provided information and generate a comprehensive report following a structured format.
               Focus on practical, actionable recommendations.`,
      messages: [{
        role: "user",
        content: `Please analyze this business information and create a detailed report:
        
        ${Object.entries(formData)
          .map(([key, value]) => `${key}: ${value}`)
          .join('\n\n')}
        
        Generate a comprehensive report with these sections:
        1. Executive Summary
        2. Problem Analysis
        3. Target Audience Profile
        4. Competitive Landscape
        5. Marketing and Communication Channels
        6. Elevator Pitch and USP
        7. Solution Overview
        8. Financial Overview: Costs and Revenue
        9. Business Advantages and Growth Opportunities
        10. Personal Fit and Long-Term Vision`
      }]
    });

    // Fixed return to handle the content properly
    return message.content[0].text;
  } catch (error) {
    console.error('Error calling Anthropic API:', error);
    throw error;
  }
}
</document_content>
</document>

<document index="13">
<source>/src/lib/types.ts</source>
<document_content>
// Your TypeScript types
// src/lib/types.ts

export interface Question {
  id: string;
  section: Section;
  preamble?: string;
  questionText: string;
  type: 'text' | 'textarea';
}

export type Section =
  | 'Problem'
  | 'Audience'
  | 'Competitors'
  | 'Channels'
  | 'Elevator Pitch'
  | 'Differentiator'
  | 'Solution'
  | 'Costs'
  | 'Revenue'
  | 'Business Boosters'
  | 'Personal Fit';

export interface FormData {
  [key: string]: string;
}

export interface AnalysisResponse {
  analysis: string;
  error?: string;
}

export interface ReportProps {
  analysis: string;
  onReset: () => void;
}
</document_content>
</document>

<!-- Utility Files -->
<document index="14">
<source>/src/utils/errorHandler.ts</source>
<document_content>
// Your error handling utilities
// This file handles all our error messages and error processing
interface AnalysisError extends Error {
  code?: string;
  details?: string;
}

export const handleAnalysisError = (error: AnalysisError): string => {
  // These are the messages users will see when different errors happen
  const errorMessages = {
    INVALID_INPUT: 'Please fill in all required fields.',
    API_TIMEOUT: 'It\'s taking longer than expected. Please try again.',
    SERVER_ERROR: 'Oops! Something went wrong. Please try again.',
    RATE_LIMIT: 'Please wait a few minutes before trying again.',
    DEFAULT: 'Failed to generate analysis. Please try again.'
  };

  // Log error for debugging
  console.error('Analysis Error:', {
    message: error.message,
    code: error.code,
    details: error.details,
    stack: error.stack
  });

  // Return the appropriate error message
  return errorMessages[error.code as keyof typeof errorMessages] || errorMessages.DEFAULT;
};
</document_content>
</document>

<document index="15">
<source>/src/utils/validation.ts</source>
<document_content>
// Your validation utilities
// This file checks if the form data is valid before we try to generate a report
export const validateFormData = (formData: FormData): boolean => {
  // List of fields that must be filled out
  const requiredFields = [
    'problem',
    'audience',
    'competitors',
    'channels',
    'elevator_pitch',
    'differentiator',
    'solution',
    'costs',
    'revenue',
    'business_boosters',
    'personal_fit'
  ];
  
  // Check each required field
  for (const field of requiredFields) {
    const value = formData.get(field);
    if (!value || String(value).trim() === '') {
      console.log(`Missing required field: ${field}`);
      return false;
    }
  }
  
  return true;
};
</document_content>
</document>
</documents>